#!/usr/bin/env python
#coding:utf-8
# Author:   --<>
# Purpose:
# Created: 25.05.2010
from __future__ import print_function
import logging
import os, os.path, sys
import optparse
from decimal import Decimal
import urllib2
from urllib2 import urlparse
import simplejson
from restfull.client import Connection
import time, datetime
import hashlib
import random
import urllib
import ConfigParser

DIRNAME = os.path.dirname(__file__)

PATH_CACHE = "/tmp/.fscache"
#PATH_LOG = "/opt/freeswitch/log/"
PATH_LOG = "./"
if not os.path.isdir(PATH_LOG):
    PATH_LOG = '/var/log/'

logging.basicConfig(level=logging.ERROR, format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s', datefmt='%a, %d %b %Y %H:%M:%S')
fileLog = logging.FileHandler(os.path.join(PATH_LOG, "fscdr.log"))
fileLog.setLevel(logging.ERROR)
#fileLog.setLevel(logging.DEBUG)
logging.getLogger('').addHandler(fileLog)
log = logging.getLogger('fscdr')


def main():
    """
    """
    parser = optparse.OptionParser()
    config = ConfigParser.ConfigParser()
    parser.add_option('-l', '--limit', action="store", dest="limit_reads", help="Limit reads line", default=100)
    options, args = parser.parse_args()

    f = os.path.join(os.environ.get("HOME"), '.fsc.ini')
    fdef = '/etc/fsc.ini'
    if os.path.isfile(f):
        log.debug("load config: {0}".format(f))
        config.read(f)
        load_dir(config, limit_reads=int(options.limit_reads))
    elif os.path.isfile(fdef):
        log.debug("load config: {0}".format(fdef))
        config.read(fdef)
        load_dir(config, limit_reads=int(options.limit_reads))
    else:
        print("Is not INI files: {0} or {1}".format(f, fdef))



def load_dir(conf, limit_reads=1):
    directory = os.path.dirname(conf.get('cdr', 'cdr_dir'))
    if not os.path.exists(conf.get('cdr', 'cdr_dir_410')):
        os.makedirs(conf.get('cdr', 'cdr_dir_410'))
    if not os.path.exists(directory):
        os.makedirs(directory)
    elif not os.path.isdir(directory):
        raise IOError("{0} exists and is not a directory.".format(directory))
    names = os.listdir(directory)   # список файлов и поддиректорий в данной директории
    for name in names:
        fullname = os.path.join(directory, name)  # получаем полное имя
        fullname_410 = os.path.join(conf.get('cdr', 'cdr_dir_410'), name)
        if os.path.isfile(fullname) and limit_reads > 0:
            try:
                log.debug("read file: {0}".format(fullname))
                cdr_file = open(fullname, "r+")
                limit_reads-=1
            except Exception as e:
                log.error(e)
                log.error("no load: {0}".format(fullname))

            try:
                cdr = urllib.unquote(cdr_file.read())
                conn = Connection(conf.get('cdr', 'base_url'), username=conf.get('cdr', 'api_user'),
                              password=conf.get('cdr', 'api_pass'), path_cache=PATH_CACHE)
                res = conn.request("/cdr/", "post", args={"cdr": cdr}, headers={'Accept': 'text/json'})
                headers = res.get('headers')
                status = headers.get('status', headers.get('Status'))
                #if res:
                #    print(res)
                if status in ['200', 200, '204', 204]:
                    os.remove(fullname)
                    #body = simplejson.loads(res.get('body').encode('UTF-8'))
                    #print("body: {0} file: {1}".format(body, fullname))
                    log.debug("remove: {0}".format(fullname))
                elif status in ['410', 410]:
                    os.rename(fullname, fullname_410)
                    log.error("status: {0} file: {1}".format(status, fullname))
                else:
                    log.error("status: {0} file: {1}".format(status, fullname))
            except:
                log.error("no connect to: {0}".format(conf.get('cdr', 'base_url')))
            finally:
                cdr_file.close()

if __name__=='__main__':
    start_time = time.time()
    main()
    log.debug(u"Обшее время выполнения: {0:3.2f}".format((time.time() - start_time)/60))
